import { showToast } from "@/utils/toasts";
import { isNotANumber } from "@/utils/validations";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";

export default function Home() {
  const [primeNumber, setPrimeNumber] = useState('');
  const [isPrime, setIsPrime] = useState(null);
  const [numbers, setNumbers] = useState([]);
  const [toastActive, setToastActive] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [currentAddNumber, setCurrentAddNumber] = useState('')
  
  const { i18n } = useTranslation()
  const tCommon = useTranslation('common').t;
  const tToasts = useTranslation('toasts').t;

  const router = useRouter()

  function handleChangeLanguage(newLanguage) {
    if (router.locale !== newLanguage) {
        const { pathname, asPath, query } = router
        router.push({ pathname, query }, asPath, { locale: newLanguage, scroll: false })
    }
}

  const showToastMessage = (type, message) => {
    if (!toastActive) {
      showToast({ type, msg: message });
      setToastMessage(message);
      setToastActive(true);
      setTimeout(() => {
        setToastActive(false);
      }, 3000);
    }
  };

  const checkPrime = (num) => {
    if (num < 2) {
      showToastMessage("error", tToasts("isnt_prime"));
      return false;
    }
    for (let i = 2; i <= Math.sqrt(num); i++) {
      if (num % i === 0) {
        showToastMessage("error", tToasts("isnt_prime"));
        return false;
      }
    }
    showToastMessage("success", tToasts("is_prime"));
    return true;
  };

  const handleCheckPrime = () => {
    const num = parseInt(primeNumber, 10);
    if (isNotANumber(num)) {
      showToastMessage("error", tToasts("not_number"));
      return;
    }
    setIsPrime(checkPrime(num));
  };

  const handleChangeAddNumber = (event) => {
    event.preventDefault();
    const { value } = event.target;
    if (isNotANumber(value)) {
      showToastMessage("error", tToasts("not_number"));
    } else {
      setCurrentAddNumber(value)
    }
  };

  const handleAddNumber = (event) => {
    event.preventDefault();
    if (currentAddNumber.length === 0) {
      showToastMessage("error", tToasts("empty_number"));
      } else {
        setNumbers((prevNumbers) => [...prevNumbers, currentAddNumber].sort((a, b) => a - b));
        setCurrentAddNumber("")
        }
        };
        
        const handleResetNumbers = () => {
          setNumbers([]);
          showToastMessage("success", tToasts("clear_success"));
  };

  const handlePrimeNumberInputChange = (event) => {
    const { value } = event.target;
    if (isNotANumber(value)) {
      showToastMessage("error", tToasts("not_number"));
    } else {
      setPrimeNumber(value);
      }
      };
      return (
        <>
      <Head>
        <title>Janz 2Logical Response</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/2logicallogo.webp" />
      </Head>
      <main>
        <div className="prime-number-container">
        <button style={{backgroundColor: i18n.language === "pt" ? "blue" : "transparent"}} onClick={() => handleChangeLanguage("pt")} className="prime-number-button">PT</button>
        <button style={{backgroundColor: i18n.language === "en" ? "blue" : "transparent"}} onClick={() => handleChangeLanguage("en")} className="prime-number-button">EN</button>
        <button style={{backgroundColor: i18n.language === "es" ? "blue" : "transparent"}} onClick={() => handleChangeLanguage("es")} className="prime-number-button">ES</button>
          <p>Insira um número e clique no botão para conferir se é primo:</p>
          <input
            className="prime-number-input"
            value={primeNumber}
            onChange={handlePrimeNumberInputChange}
          />
          <button className="prime-number-button" onClick={handleCheckPrime}>
            {tCommon("verify")}
          </button>
          {isPrime !== null && (
            <p>{isPrime ? tToasts("is_prime") : tToasts("isnt_prime")}</p>
          )}
        </div>
        <div className="prime-number-container">
          <p>Insira números para ordená-los:</p>
            <input
              value={currentAddNumber}
              name="number"
              className="prime-number-input"
              onChange={handleChangeAddNumber}
            />
            <button
              className="prime-number-button"
              type="submit"
              onClick={handleAddNumber}
              >
              {tCommon("add_number")}
            </button>
          {numbers.length > 0 && (
            <>
              <p>Números ordenados: {numbers.join(', ')}</p>
              <button className="prime-number-button" onClick={handleResetNumbers}>
                {tCommon("reset_numbers")}
              </button>
            </>
          )}
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps({ locale }) {
  return {
    props: {
      ...(await serverSideTranslations(locale, ["common", "toasts"]))
    }
  };
}
